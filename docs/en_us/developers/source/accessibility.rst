#######################
edX Accessibility Guide
#######################

* `Use labels on all form elements`_
* `Use semantic markup`_
* `Use ARIA properties`_
* `Think about navigation within the page`_
* `Provide feedback on dynamic elements`_
* `Hide irrelevant blocks from screen readers`_
* `Provide descriptive page titles`_
* `Use accessible modals`_
* `Make sure elements change state when they are focused`_

If you make a UI change, make sure that your interface is accessible to users with vision and hearing disabilities.

Use `ChromeVox <http://www.chromevox.com>`_ to test your page in a screen reader.

* `Web Content Accessibility Guide <http://www.w3.org/TR/WCAG20/>`_
* `Accessible Rich Internet Application Authoring Practices <http://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/>`_

Use labels on all form elements
*******************************

	For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.

All form elements should have labels, either by using ``<label>`` or ``aria-label``/``aria-labeledby``. Form inputs should be inside ``<fieldset>`` where possible.

PR `#2426 <https://github.com/edx/edx-platform/commit/c7c807f270c549810501804127480c11533624b9>`_

Use semantic markup
*******************************

	Information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text.
	
	When the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined.

Avoid using ``<section>`` tags unneccessarily. Tags like ``<section>`` and ``<article>`` are read by screen readers. In a nested section, every parent section will be announced. 

Avoid using ``<li>`` for items that are not actually lists.

PR `#2439 <https://github.com/edx/edx-platform/commit/793dae53b720d2563a6354c89703087c36c1400b>`_

Use ARIA properties
*******************

When developing new HTML/JS widgets, follow the `13 steps for building an accessible widget <http://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#accessiblewidget>`_. Basically, you need to use the appropriate `role` attribute for your widget, ensure it can be navigated with the keyboard, ensure that the appropriate ARIA properties are updated dynamically, synchronize visual changes with the accessible properties, and test with an accessible user-agent. Designing the widget to be accessible before it's pretty will help prevent accessibility from becoming an afterthought. Check the ARIA `Design Patterns <http://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#aria_ex>`_ to find out which ARIA properties and roles to add to your elements. Some attributes may need to be updated dynamically, for instance, when creating a `<Drag and Drop interface <http://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#draganddrop>`_

Examples:
`Tab Panel <http://www.oaa-accessibility.org/examplep/tabpanel1/>`_
`Modal Dialog <http://www.oaa-accessibility.org/examplep/alertdialog1/>`_

Think about navigation within the page
**************************************

	A mechanism is available to bypass blocks of content that are repeated on multiple Web pages. 

	If a Web page can be navigated sequentially and the navigation sequences affect meaning or operation, focusable components receive focus in an order that preserves meaning and operability. 

On new pages, add a block like this ``<%block name="nav_skip">#my-content-container</%block>`` to allow users to skip past navigation elements.

PR `#2475 <https://github.com/edx/edx-platform/commit/28f2a547a5d9e8a38f3aef2cd467b1f3c86977ab>`_

Provide feedback on dynamic elements
************************************

Dynamic elements need to have their state reflected to assistive tech. Using ``aria-live="polite"`` will cause the contents of the element to be read when they're dynamically changed. There are also global functions (from ``accessibility_tools.js``) you can use:
::
	SR.readText('some message here');
	SR.readElts($('#my-message'));


PR `#2595 <https://github.com/edx/edx-platform/pull/2595>`_

Hide irrelevant blocks from screen readers
******************************************

Hide blocks with ``aria-hidden="true"``.
If you add blocks of text or decorative spans, consider whether they should be hidden from screen readers. For instance, a close button that looks like ``X`` will be read as the letter x, unless you hide the span. To visibly hide content that should be read by screen readers, use the ``sr`` class:
::
	<a href="">
		<span aria-hidden="true">X</span>
		<span class="sr">close</span>
	</a>

Javascript templates in the form: ``<script type="text/template"></script>`` must have an ``aria-hidden="true"`` attribute.

PR `#2496 <https://github.com/edx/edx-platform/commit/01ac04ca60873b79941f2b1ece6ebdf7bae54d52>`_

Provide descriptive page titles
*******************************

	Web pages have titles that describe topic or purpose.

Descriptive page titles help assistive tech users to navigate, particularly when switching between windows. LMS uses breadcrumbs in the title, going from more specific to less specific. Use the ``page_title_breadcrumbs()`` function to set the page title in templates.

PR `#2343 <https://github.com/edx/edx-platform/commit/5122c292c7798be7abd635ce910ce9a70eb8f3c3>`_

Use accessible modals
*********************

For modal dialogs, use the ``accessible_modal()`` function. For a simple confirmation dialog, use ``accessible_confirm()`` in ``accessible_confirm.html``. The default javascript ``confirm()`` and ``alert()`` change focus unpredictably and do not announce their contents to screen readers.

PR `#2638 <https://github.com/edx/edx-platform/commit/a8a20a6a5cbad0a4f058cdddbccda598c4afa296>`_

Make sure elements change state when they are focused
*****************************************************

	Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. 

By default, elements that receive focus (those that have a ``tabindex`` set) will display an outline. Stylesheets should not contain ``outline: none``, unless they use an alternative means of indicating that the element is in focus.
Also, if an element has a ``:hover`` pseudoclass, ``:focus`` should be identical.

PR `#2946 <https://github.com/edx/edx-platform/commit/da79ae2b4d09a090df53cdbb08cdc454e8384eb6>`_

